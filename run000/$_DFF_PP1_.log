
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+932 (git sha1 5daa6eab, clang 6.0.0-1ubuntu2 -fPIC -Os)


-- Running command `read_verilog /opt/eda/fpga/FOSS/yosys_altera/techlibs/common/simcells.v; design -save read; hierarchy -top \$_DFF_PP1_; proc; flatten; equiv_opt -assert -async2sync -map +/intel/max10/cells_sim.v synth_intel;' --

1. Executing Verilog-2005 frontend: /opt/eda/fpga/FOSS/yosys_altera/techlibs/common/simcells.v
Parsing Verilog input from `/opt/eda/fpga/FOSS/yosys_altera/techlibs/common/simcells.v' to AST representation.
Warning: Yosys has only limited support for tri-state logic at the moment. (/opt/eda/fpga/FOSS/yosys_altera/techlibs/common/simcells.v:456)
Generating RTLIL representation for module `\$_BUF_'.
Generating RTLIL representation for module `\$_NOT_'.
Generating RTLIL representation for module `\$_AND_'.
Generating RTLIL representation for module `\$_NAND_'.
Generating RTLIL representation for module `\$_OR_'.
Generating RTLIL representation for module `\$_NOR_'.
Generating RTLIL representation for module `\$_XOR_'.
Generating RTLIL representation for module `\$_XNOR_'.
Generating RTLIL representation for module `\$_ANDNOT_'.
Generating RTLIL representation for module `\$_ORNOT_'.
Generating RTLIL representation for module `\$_MUX_'.
Generating RTLIL representation for module `\$_NMUX_'.
Generating RTLIL representation for module `\$_MUX4_'.
Generating RTLIL representation for module `\$_MUX8_'.
Generating RTLIL representation for module `\$_MUX16_'.
Generating RTLIL representation for module `\$_AOI3_'.
Generating RTLIL representation for module `\$_OAI3_'.
Generating RTLIL representation for module `\$_AOI4_'.
Generating RTLIL representation for module `\$_OAI4_'.
Generating RTLIL representation for module `\$_TBUF_'.
Generating RTLIL representation for module `\$_SR_NN_'.
Generating RTLIL representation for module `\$_SR_NP_'.
Generating RTLIL representation for module `\$_SR_PN_'.
Generating RTLIL representation for module `\$_SR_PP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCHSR_NNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_NNP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPN_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_PNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PNP_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \$_DFF_PP1_

2.2. Analyzing design hierarchy..
Top module:  \$_DFF_PP1_
Removing unused module `\$_DLATCHSR_PPP_'.
Removing unused module `\$_DLATCHSR_PPN_'.
Removing unused module `\$_DLATCHSR_PNP_'.
Removing unused module `\$_DLATCHSR_PNN_'.
Removing unused module `\$_DLATCHSR_NPP_'.
Removing unused module `\$_DLATCHSR_NPN_'.
Removing unused module `\$_DLATCHSR_NNP_'.
Removing unused module `\$_DLATCHSR_NNN_'.
Removing unused module `\$_DLATCH_P_'.
Removing unused module `\$_DLATCH_N_'.
Removing unused module `\$_DFFSR_PPP_'.
Removing unused module `\$_DFFSR_PPN_'.
Removing unused module `\$_DFFSR_PNP_'.
Removing unused module `\$_DFFSR_PNN_'.
Removing unused module `\$_DFFSR_NPP_'.
Removing unused module `\$_DFFSR_NPN_'.
Removing unused module `\$_DFFSR_NNP_'.
Removing unused module `\$_DFFSR_NNN_'.
Removing unused module `\$_DFF_PP0_'.
Removing unused module `\$_DFF_PN1_'.
Removing unused module `\$_DFF_PN0_'.
Removing unused module `\$_DFF_NP1_'.
Removing unused module `\$_DFF_NP0_'.
Removing unused module `\$_DFF_NN1_'.
Removing unused module `\$_DFF_NN0_'.
Removing unused module `\$_DFFE_PP_'.
Removing unused module `\$_DFFE_PN_'.
Removing unused module `\$_DFFE_NP_'.
Removing unused module `\$_DFFE_NN_'.
Removing unused module `\$_DFF_P_'.
Removing unused module `\$_DFF_N_'.
Removing unused module `\$_SR_PP_'.
Removing unused module `\$_SR_PN_'.
Removing unused module `\$_SR_NP_'.
Removing unused module `\$_SR_NN_'.
Removing unused module `\$_TBUF_'.
Removing unused module `\$_OAI4_'.
Removing unused module `\$_AOI4_'.
Removing unused module `\$_OAI3_'.
Removing unused module `\$_AOI3_'.
Removing unused module `\$_MUX16_'.
Removing unused module `\$_MUX8_'.
Removing unused module `\$_MUX4_'.
Removing unused module `\$_NMUX_'.
Removing unused module `\$_MUX_'.
Removing unused module `\$_ORNOT_'.
Removing unused module `\$_ANDNOT_'.
Removing unused module `\$_XNOR_'.
Removing unused module `\$_XOR_'.
Removing unused module `\$_NOR_'.
Removing unused module `\$_OR_'.
Removing unused module `\$_NAND_'.
Removing unused module `\$_AND_'.
Removing unused module `\$_NOT_'.
Removing unused module `\$_BUF_'.
Removed 55 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/opt/eda/fpga/FOSS/yosys_altera/techlibs/common/simcells.v:862$93 in module \$_DFF_PP1_.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 0 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \R in `\$_DFF_PP1_.$proc$/opt/eda/fpga/FOSS/yosys_altera/techlibs/common/simcells.v:862$93'.

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\$_DFF_PP1_.$proc$/opt/eda/fpga/FOSS/yosys_altera/techlibs/common/simcells.v:862$93'.
     1/1: $0\Q[0:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\$_DFF_PP1_.\Q' using process `\$_DFF_PP1_.$proc$/opt/eda/fpga/FOSS/yosys_altera/techlibs/common/simcells.v:862$93'.
  created $adff cell `$procdff$155' with positive edge clock and positive level reset.

3.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `\$_DFF_PP1_.$proc$/opt/eda/fpga/FOSS/yosys_altera/techlibs/common/simcells.v:862$93'.
Cleaned up 0 empty switches.

4. Executing FLATTEN pass (flatten design).
No more expansions possible.

5. Executing EQUIV_OPT pass.

5.1. Executing HIERARCHY pass (managing design hierarchy).

5.1.1. Analyzing design hierarchy..
Top module:  \$_DFF_PP1_

5.1.2. Analyzing design hierarchy..
Top module:  \$_DFF_PP1_
Removed 0 unused modules.

5.2. Executing SYNTH_INTEL pass.

5.2.1. Executing Verilog-2005 frontend: /opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v
Parsing SystemVerilog input from `/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\fiftyfivenm_io_ibuf'.
Generating RTLIL representation for module `\fiftyfivenm_io_obuf'.
Generating RTLIL representation for module `\fiftyfivenm_lcell_comb'.
Generating RTLIL representation for module `\dffeas'.
Generating RTLIL representation for module `\dff_prim'.
Generating RTLIL representation for module `\fiftyfivenm_pll'.
Successfully finished Verilog frontend.

5.2.2. Executing Verilog-2005 frontend: /opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/common/m9k_bb.v
Parsing SystemVerilog input from `/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/common/m9k_bb.v' to AST representation.
Generating RTLIL representation for module `\altsyncram'.
Successfully finished Verilog frontend.

5.2.3. Executing Verilog-2005 frontend: /opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/common/altpll_bb.v
Parsing SystemVerilog input from `/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/common/altpll_bb.v' to AST representation.
Successfully finished Verilog frontend.

5.2.4. Executing HIERARCHY pass (managing design hierarchy).

5.2.4.1. Analyzing design hierarchy..
Top module:  \$_DFF_PP1_

5.2.4.2. Analyzing design hierarchy..
Top module:  \$_DFF_PP1_
Removed 0 unused modules.

5.2.5. Executing PROC pass (convert processes to netlists).

5.2.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.2.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

5.2.5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

5.2.5.4. Executing PROC_INIT pass (extract init attributes).

5.2.5.5. Executing PROC_ARST pass (detect async resets in processes).

5.2.5.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

5.2.5.7. Executing PROC_DLATCH pass (convert process syncs to latches).

5.2.5.8. Executing PROC_DFF pass (convert process syncs to FFs).

5.2.5.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.2.6. Executing FLATTEN pass (flatten design).
No more expansions possible.

5.2.7. Executing TRIBUF pass.

5.2.8. Executing DEMINOUT pass (demote inout ports to input or output).

5.2.9. Executing SYNTH pass.

5.2.9.1. Executing PROC pass (convert processes to netlists).

5.2.9.1.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.2.9.1.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

5.2.9.1.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

5.2.9.1.4. Executing PROC_INIT pass (extract init attributes).

5.2.9.1.5. Executing PROC_ARST pass (detect async resets in processes).

5.2.9.1.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

5.2.9.1.7. Executing PROC_DLATCH pass (convert process syncs to latches).

5.2.9.1.8. Executing PROC_DFF pass (convert process syncs to FFs).

5.2.9.1.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.2.9.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module \$_DFF_PP1_.
<suppressed ~1 debug messages>

5.2.9.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \$_DFF_PP1_..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

5.2.9.4. Executing CHECK pass (checking for obvious problems).
checking module \$_DFF_PP1_..
found and reported 0 problems.

5.2.9.5. Executing OPT pass (performing simple optimizations).

5.2.9.5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module \$_DFF_PP1_.

5.2.9.5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\$_DFF_PP1_'.
Removed a total of 0 cells.

5.2.9.5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \$_DFF_PP1_..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.2.9.5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \$_DFF_PP1_.
Performed a total of 0 changes.

5.2.9.5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\$_DFF_PP1_'.
Removed a total of 0 cells.

5.2.9.5.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.2.9.5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \$_DFF_PP1_..

5.2.9.5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module \$_DFF_PP1_.

5.2.9.5.9. Finished OPT passes. (There is nothing left to do.)

5.2.9.6. Executing WREDUCE pass (reducing word size of cells).

5.2.9.7. Executing PEEPOPT pass (run peephole optimizers).

5.2.9.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \$_DFF_PP1_..

5.2.9.9. Executing TECHMAP pass (map to technology primitives).

5.2.9.9.1. Executing Verilog-2005 frontend: /opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

5.2.9.9.2. Continuing TECHMAP pass.
No more expansions possible.

5.2.9.10. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module \$_DFF_PP1_:
  created 0 $alu and 0 $macc cells.

5.2.9.11. Executing SHARE pass (SAT-based resource sharing).

5.2.9.12. Executing OPT pass (performing simple optimizations).

5.2.9.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module \$_DFF_PP1_.

5.2.9.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\$_DFF_PP1_'.
Removed a total of 0 cells.

5.2.9.12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \$_DFF_PP1_..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.2.9.12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \$_DFF_PP1_.
Performed a total of 0 changes.

5.2.9.12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\$_DFF_PP1_'.
Removed a total of 0 cells.

5.2.9.12.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.2.9.12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \$_DFF_PP1_..

5.2.9.12.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module \$_DFF_PP1_.

5.2.9.12.9. Finished OPT passes. (There is nothing left to do.)

5.2.9.13. Executing FSM pass (extract and optimize FSM).

5.2.9.13.1. Executing FSM_DETECT pass (finding FSMs in design).

5.2.9.13.2. Executing FSM_EXTRACT pass (extracting FSM from design).

5.2.9.13.3. Executing FSM_OPT pass (simple optimizations of FSMs).

5.2.9.13.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \$_DFF_PP1_..

5.2.9.13.5. Executing FSM_OPT pass (simple optimizations of FSMs).

5.2.9.13.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

5.2.9.13.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

5.2.9.13.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

5.2.9.14. Executing OPT pass (performing simple optimizations).

5.2.9.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module \$_DFF_PP1_.

5.2.9.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\$_DFF_PP1_'.
Removed a total of 0 cells.

5.2.9.14.3. Executing OPT_RMDFF pass (remove dff with constant values).

5.2.9.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \$_DFF_PP1_..

5.2.9.14.5. Finished fast OPT passes.

5.2.9.15. Executing MEMORY pass.

5.2.9.15.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

5.2.9.15.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \$_DFF_PP1_..

5.2.9.15.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

5.2.9.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \$_DFF_PP1_..

5.2.9.15.5. Executing MEMORY_COLLECT pass (generating $mem cells).

5.2.9.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \$_DFF_PP1_..

5.2.10. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

5.2.11. Executing TECHMAP pass (map to technology primitives).

5.2.11.1. Executing Verilog-2005 frontend: /opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/common/drams_map_m9k.v
Parsing Verilog input from `/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/common/drams_map_m9k.v' to AST representation.
Generating RTLIL representation for module `\$__ALTSYNCRAM_SINGLE_PORT'.
Successfully finished Verilog frontend.

5.2.11.2. Continuing TECHMAP pass.
No more expansions possible.

5.2.12. Executing altsyncram_init pass.
[diego] Entering altsyncram_init pass
[diego] Not an altsyncram cell. Cell type is $adff

5.2.13. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

5.2.14. Executing TECHMAP pass (map to technology primitives).

5.2.14.1. Executing Verilog-2005 frontend: /opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/common/brams_map_m9k.v
Parsing Verilog input from `/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/common/brams_map_m9k.v' to AST representation.
Generating RTLIL representation for module `\$__ALTSYNCRAM_SDP'.
Successfully finished Verilog frontend.

5.2.14.2. Continuing TECHMAP pass.
No more expansions possible.

5.2.15. Executing altsyncram_init pass.
[diego] Entering altsyncram_init pass
[diego] Not an altsyncram cell. Cell type is $adff

5.2.16. Executing OPT pass (performing simple optimizations).

5.2.16.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module \$_DFF_PP1_.

5.2.16.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\$_DFF_PP1_'.
Removed a total of 0 cells.

5.2.16.3. Executing OPT_RMDFF pass (remove dff with constant values).

5.2.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \$_DFF_PP1_..

5.2.16.5. Finished fast OPT passes.

5.2.17. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

5.2.18. Executing OPT pass (performing simple optimizations).

5.2.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module \$_DFF_PP1_.

5.2.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\$_DFF_PP1_'.
Removed a total of 0 cells.

5.2.18.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \$_DFF_PP1_..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.2.18.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \$_DFF_PP1_.
Performed a total of 0 changes.

5.2.18.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\$_DFF_PP1_'.
Removed a total of 0 cells.

5.2.18.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.2.18.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \$_DFF_PP1_..

5.2.18.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module \$_DFF_PP1_.

5.2.18.9. Finished OPT passes. (There is nothing left to do.)

5.2.19. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

5.2.20. Executing dff2dffs pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into DFFs in \$_DFF_PP1_.

5.2.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \$_DFF_PP1_..

5.2.22. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $__DFFS_PP1_ -> $__DFFSE_PP1
  $__DFFS_PP0_ -> $__DFFSE_PP0
  $__DFFS_PN1_ -> $__DFFSE_PN1
  $__DFFS_PN0_ -> $__DFFSE_PN0
  $__DFFS_NP1_ -> $__DFFSE_NP1
  $__DFFS_NP0_ -> $__DFFSE_NP0
  $__DFFS_NN1_ -> $__DFFSE_NN1
  $__DFFS_NN0_ -> $__DFFSE_NN0
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module \$_DFF_PP1_:

5.2.23. Executing OPT pass (performing simple optimizations).

5.2.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module \$_DFF_PP1_.

5.2.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\$_DFF_PP1_'.
Removed a total of 0 cells.

5.2.23.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \$_DFF_PP1_..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.2.23.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \$_DFF_PP1_.
Performed a total of 0 changes.

5.2.23.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\$_DFF_PP1_'.
Removed a total of 0 cells.

5.2.23.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.2.23.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \$_DFF_PP1_..

5.2.23.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module \$_DFF_PP1_.

5.2.23.9. Finished OPT passes. (There is nothing left to do.)

5.2.24. Executing TECHMAP pass (map to technology primitives).

5.2.24.1. Executing Verilog-2005 frontend: /opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/techmap.v
Parsing Verilog input from `/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

5.2.24.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $adff.
No more expansions possible.
<suppressed ~1 debug messages>

5.2.25. Executing OPT pass (performing simple optimizations).

5.2.25.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module \$_DFF_PP1_.

5.2.25.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\$_DFF_PP1_'.
Removed a total of 0 cells.

5.2.25.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \$_DFF_PP1_..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.2.25.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \$_DFF_PP1_.
Performed a total of 0 changes.

5.2.25.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\$_DFF_PP1_'.
Removed a total of 0 cells.

5.2.25.6. Executing OPT_SHARE pass.

5.2.25.7. Executing OPT_RMDFF pass (remove dff with constant values).

5.2.25.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \$_DFF_PP1_..

5.2.25.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module \$_DFF_PP1_.

5.2.25.10. Finished OPT passes. (There is nothing left to do.)

5.2.26. Executing SETUNDEF pass (replace undef values with defined constants).

5.2.27. Executing ABC pass (technology mapping using ABC).

5.2.27.1. Extracting gate netlist of module `\$_DFF_PP1_' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

5.2.28. Executing TECHMAP pass (map to technology primitives).

5.2.28.1. Executing Verilog-2005 frontend: /opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_map.v
Parsing Verilog input from `/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__inpad'.
Generating RTLIL representation for module `\$__outpad'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

5.2.28.2. Continuing TECHMAP pass.
Using template \$_DFF_PP1_ for cells of type $_DFF_PP1_.
No more expansions possible.
<suppressed ~1 debug messages>

5.2.29. Executing DFFINIT pass (set INIT param on FF cells).
Setting \$_DFF_PP1_.$auto$simplemap.cc:496:simplemap_adff$203.power_up (port=q, net=$techmap223$auto$simplemap.cc:496:simplemap_adff$203.Q_n) to 24'011011000110111101110111.
Removed 0 unused cells and 4 unused wires.

5.2.30. Executing HIERARCHY pass (managing design hierarchy).

5.2.30.1. Analyzing design hierarchy..
Top module:  \$_DFF_PP1_

5.2.30.2. Analyzing design hierarchy..
Top module:  \$_DFF_PP1_
Removed 0 unused modules.

5.2.31. Printing statistics.

=== \$_DFF_PP1_ ===

   Number of wires:                  7
   Number of wire bits:              7
   Number of public wires:           4
   Number of public wire bits:       4
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4
     $not                            2
     dffeas                          1
     fiftyfivenm_lcell_comb          1

5.2.32. Executing CHECK pass (checking for obvious problems).
checking module \$_DFF_PP1_..
found and reported 0 problems.

5.3. Executing TECHMAP pass (map to technology primitives).

5.3.1. Executing Verilog-2005 frontend: /opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v
Parsing Verilog input from `/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\fiftyfivenm_io_ibuf'.
Generating RTLIL representation for module `\fiftyfivenm_io_obuf'.
Generating RTLIL representation for module `\fiftyfivenm_lcell_comb'.
Note: Assuming pure combinatorial block at /opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:89 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Generating RTLIL representation for module `\dffeas'.
Generating RTLIL representation for module `\dff_prim'.
Generating RTLIL representation for module `\fiftyfivenm_pll'.
Successfully finished Verilog frontend.

5.3.2. Continuing TECHMAP pass.
Using template $paramod\dffeas\power_up=24'011011000110111101110111\is_wysiwyg=1414681925 for cells of type dffeas.
Using template $paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb for cells of type fiftyfivenm_lcell_comb.
Technology map yielded processes: $proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:79$404 $proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:89$333

5.3.7. Executing PROC pass (convert processes to netlists).

5.3.7.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:79$404'.
Cleaned up 1 empty switch.
<suppressed ~31 debug messages>

5.3.7.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:89$333 in module $paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.
Removed a total of 0 dead cases.

5.3.7.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 31 assignments to connections.

5.3.7.4. Executing PROC_INIT pass (extract init attributes).

5.3.7.5. Executing PROC_ARST pass (detect async resets in processes).

5.3.7.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:79$404'.
Creating decoders for process `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:89$333'.
     1/29: $2\combout_rt[0:0]
     2/29: $2$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:95$331$\lut_data[0:0]$385
     3/29: $2$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:95$331$\s1[1:0]$393
     4/29: $2$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:95$331$\s2[3:0]$392
     5/29: $2$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:95$331$\s3[7:0]$391
     6/29: $2$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:95$331$\datad[0:0]$390
     7/29: $2$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:95$331$\datac[0:0]$389
     8/29: $2$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:95$331$\datab[0:0]$388
     9/29: $2$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:95$331$\dataa[0:0]$387
    10/29: $2$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:95$331$\mask[15:0]$386
    11/29: $1\combout_rt[0:0]
    12/29: $1$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:91$330$\lut_data[0:0]$362
    13/29: $1$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:91$330$\s1[1:0]$370
    14/29: $1$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:91$330$\s2[3:0]$369
    15/29: $1$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:91$330$\s3[7:0]$368
    16/29: $1$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:91$330$\datad[0:0]$367
    17/29: $1$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:91$330$\datac[0:0]$366
    18/29: $1$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:91$330$\datab[0:0]$365
    19/29: $1$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:91$330$\dataa[0:0]$364
    20/29: $1$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:91$330$\mask[15:0]$363
    21/29: $1$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:95$331$\s1[1:0]$379
    22/29: $1$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:95$331$\s2[3:0]$378
    23/29: $1$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:95$331$\s3[7:0]$377
    24/29: $1$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:95$331$\datad[0:0]$376
    25/29: $1$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:95$331$\datac[0:0]$375
    26/29: $1$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:95$331$\datab[0:0]$374
    27/29: $1$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:95$331$\dataa[0:0]$373
    28/29: $1$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:95$331$\mask[15:0]$372
    29/29: $1$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:95$331$\lut_data[0:0]$371

5.3.7.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.\lut_type' from process `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:79$404'.
No latch inferred for signal `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.\cout_rt' from process `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:89$333'.
No latch inferred for signal `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:91$330$\lut_data' from process `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:89$333'.
No latch inferred for signal `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:91$330$\mask' from process `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:89$333'.
No latch inferred for signal `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:91$330$\dataa' from process `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:89$333'.
No latch inferred for signal `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:91$330$\datab' from process `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:89$333'.
No latch inferred for signal `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:91$330$\datac' from process `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:89$333'.
No latch inferred for signal `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:91$330$\datad' from process `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:89$333'.
No latch inferred for signal `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:91$330$\s3' from process `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:89$333'.
No latch inferred for signal `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:91$330$\s2' from process `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:89$333'.
No latch inferred for signal `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:91$330$\s1' from process `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:89$333'.
No latch inferred for signal `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:95$331$\lut_data' from process `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:89$333'.
No latch inferred for signal `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:95$331$\mask' from process `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:89$333'.
No latch inferred for signal `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:95$331$\dataa' from process `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:89$333'.
No latch inferred for signal `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:95$331$\datab' from process `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:89$333'.
No latch inferred for signal `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:95$331$\datac' from process `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:89$333'.
No latch inferred for signal `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:95$331$\datad' from process `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:89$333'.
No latch inferred for signal `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:95$331$\s3' from process `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:89$333'.
No latch inferred for signal `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:95$331$\s2' from process `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:89$333'.
No latch inferred for signal `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:95$331$\s1' from process `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:89$333'.
No latch inferred for signal `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:98$332$\lut_data' from process `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:89$333'.
No latch inferred for signal `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:98$332$\mask' from process `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:89$333'.
No latch inferred for signal `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:98$332$\dataa' from process `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:89$333'.
No latch inferred for signal `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:98$332$\datab' from process `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:89$333'.
No latch inferred for signal `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:98$332$\datac' from process `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:89$333'.
No latch inferred for signal `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:98$332$\datad' from process `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:89$333'.
No latch inferred for signal `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:98$332$\s3' from process `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:89$333'.
No latch inferred for signal `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:98$332$\s2' from process `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:89$333'.
No latch inferred for signal `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$func$\lut_data$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:98$332$\s1' from process `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:89$333'.
Latch inferred for signal `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.\combout_rt' from process `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:89$333': $auto$proc_dlatch.cc:409:proc_dlatch$522

5.3.7.8. Executing PROC_DFF pass (convert process syncs to FFs).

5.3.7.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:79$404'.
Found and cleaned up 2 empty switches in `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:89$333'.
Removing empty process `$paramod$fcfae05572b6a569b43518a9fc38cd54d2ce7e54\fiftyfivenm_lcell_comb.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:89$333'.
Cleaned up 2 empty switches.
Using template dff_prim for cells of type dff_prim.
Technology map yielded processes: $proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:152$316

5.3.8. Executing PROC pass (convert processes to netlists).

5.3.8.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.
<suppressed ~1 debug messages>

5.3.8.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:152$316 in module dff_prim.
Removed a total of 0 dead cases.

5.3.8.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 0 assignments to connections.

5.3.8.4. Executing PROC_INIT pass (extract init attributes).

5.3.8.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \r in `\dff_prim.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:152$316'.
Found async reset \s in `\dff_prim.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:152$316'.

5.3.8.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\dff_prim.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:152$316'.
     1/1: $0\q[0:0]

5.3.8.7. Executing PROC_DLATCH pass (convert process syncs to latches).

5.3.8.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\dff_prim.\q' using process `\dff_prim.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:152$316'.
Warning: Complex async reset for dff `\q'.
  created $dffsr cell `$procdff$561' with positive edge clock and multiple level-sensitive resets.

5.3.8.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `dff_prim.$proc$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:152$316'.
Cleaned up 0 empty switches.
No more expansions possible.

5.4. Executing ASYNC2SYNC pass.
Replacing gate.$techmap$auto$simplemap.cc:496:simplemap_adff$203.dffsre.$procdff$561 ($dffsr): SET=$techmap$auto$simplemap.cc:496:simplemap_adff$203.dffsre.$auto$proc_dff.cc:117:gen_dffsr_complex$558, CLR=$techmap$auto$simplemap.cc:496:simplemap_adff$203.dffsre.$auto$proc_dff.cc:124:gen_dffsr_complex$560, D=$techmap$auto$simplemap.cc:496:simplemap_adff$203.dffsre.$or$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:150$315_Y, Q=$techmap223$auto$simplemap.cc:496:simplemap_adff$203.Q_n
Replacing gate.$techmap$techmap223$auto$simplemap.cc:496:simplemap_adff$203.QH0.$auto$proc_dlatch.cc:409:proc_dlatch$522 ($dlatch): EN=$techmap$techmap223$auto$simplemap.cc:496:simplemap_adff$203.QH0.$auto$rtlil.cc:1844:Not$548, D=$techmap$techmap223$auto$simplemap.cc:496:simplemap_adff$203.QH0.$procmux$466_Y, Q=$techmap223$auto$simplemap.cc:496:simplemap_adff$203.QH0.combout_rt
Replacing gold.$procdff$155 ($adff): ARST=\R, D=\D, Q=\Q

5.5. Executing EQUIV_MAKE pass (creating equiv checking module).
Presumably equivalent wires: Q_gold (\Q_gold), Q_gate ($techmap$techmap223$auto$simplemap.cc:496:simplemap_adff$203.QH0.$and$/opt/eda/fpga/FOSS/yosys_altera/binaries/bin/../share/yosys/intel/max10/cells_sim.v:101$402_Y_gate) -> Q
Presumably equivalent wires: R_gold (\R_gold), R_gate (\R_gate) -> R
Presumably equivalent wires: C_gold (\C_gold), C_gate (\C_gate) -> C
Presumably equivalent wires: D_gold (\D_gold), D_gate (\D_gate) -> D
Setting undriven nets to undef: $auto$simplemap.cc:496:simplemap_adff$203.clk_gate
Setting undriven nets to undef: $auto$simplemap.cc:496:simplemap_adff$203.ena_gate
Setting undriven nets to undef: $auto$simplemap.cc:496:simplemap_adff$203.clrn_gate
Setting undriven nets to undef: $auto$simplemap.cc:496:simplemap_adff$203.prn_gate
Setting undriven nets to undef: $auto$simplemap.cc:496:simplemap_adff$203.q_gate
Setting undriven nets to undef: $auto$simplemap.cc:496:simplemap_adff$203.d_gate
Setting undriven nets to undef: $auto$simplemap.cc:496:simplemap_adff$203.sclr_gate
Setting undriven nets to undef: $auto$simplemap.cc:496:simplemap_adff$203.sload_gate
Setting undriven nets to undef: $auto$simplemap.cc:496:simplemap_adff$203.aload_gate
Setting undriven nets to undef: $auto$simplemap.cc:496:simplemap_adff$203.asdata_gate
Setting undriven nets to undef: $auto$simplemap.cc:496:simplemap_adff$203.dffsre.ck_gate
Setting undriven nets to undef: $auto$simplemap.cc:496:simplemap_adff$203.dffsre.en_gate
Setting undriven nets to undef: $auto$simplemap.cc:496:simplemap_adff$203.dffsre.d_gate
Setting undriven nets to undef: $auto$simplemap.cc:496:simplemap_adff$203.dffsre.s_gate
Setting undriven nets to undef: $auto$simplemap.cc:496:simplemap_adff$203.dffsre.r_gate
Setting undriven nets to undef: $auto$simplemap.cc:496:simplemap_adff$203.dffsre.q_gate
Setting undriven nets to undef: $techmap223$auto$simplemap.cc:496:simplemap_adff$203.QH0.combout_gate
Setting undriven nets to undef: $techmap223$auto$simplemap.cc:496:simplemap_adff$203.QH0.dataa_gate
Setting undriven nets to undef: $techmap223$auto$simplemap.cc:496:simplemap_adff$203.QH0.datab_gate
Setting undriven nets to undef: $techmap223$auto$simplemap.cc:496:simplemap_adff$203.QH0.datac_gate
Setting undriven nets to undef: $techmap223$auto$simplemap.cc:496:simplemap_adff$203.QH0.datad_gate
Setting undriven nets to undef: $techmap223$auto$simplemap.cc:496:simplemap_adff$203.QH0.cin_gate
Setting undriven nets to undef: $techmap223$auto$simplemap.cc:496:simplemap_adff$203.QH0.cin_w_gate

5.6. Executing EQUIV_INDUCT pass.
Found 1 unproven $equiv cells in module equiv:
  Proving existence of base case for step 1. (3099 clauses over 1199 variables)
  Proving induction step 1. (6225 clauses over 2405 variables)
  Proof for induction step holds. Entire workset of 1 cells proven!
Proved 1 previously unproven $equiv cells.

5.7. Executing EQUIV_STATUS pass.
Found 1 $equiv cells in equiv:
  Of those cells 1 are proven and 0 are unproven.
  Equivalence successfully proven!

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: 629f3318de
CPU: user 0.15s system 0.00s, MEM: 50.04 MB total, 17.16 MB resident
Yosys 0.9+932 (git sha1 5daa6eab, clang 6.0.0-1ubuntu2 -fPIC -Os)
Time spent: 42% 14x read_verilog (0 sec), 9% 6x techmap (0 sec), ...
